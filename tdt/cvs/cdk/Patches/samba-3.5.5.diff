--- samba-3.5.5/source3/configure.in	2010-06-18 16:01:04.000000000 +-0400
+++ samba-3.5.5/source3/configure.in-new	2010-08-30 22:31:04.000000000 +-0400
@@ -306,44 +306,12 @@
    Werror_FLAGS="-qhalt=w"
 fi
 fi
 fi
 fi
 
-############################################
-# check if the compiler can handle negative enum values
-# and don't truncate the values to INT_MAX
-# a runtime test is needed here
-AC_SUBST(PIDL_ARGS)
-AC_CACHE_CHECK([that the C compiler understands negative enum values],samba_cv_CC_NEGATIVE_ENUM_VALUES, [
-    AC_TRY_RUN(
-[
-	#include <stdio.h>
-	enum negative_values { NEGATIVE_VALUE = 0xFFFFFFFF };
-	int main(void) {
-		enum negative_values v1 = NEGATIVE_VALUE;
-		unsigned v2 = NEGATIVE_VALUE;
-
-		if (v1 != 0xFFFFFFFF) {
-			printf("%u != 0xFFFFFFFF\n", v1);
-			return 1;
-		}
-		if (v2 != 0xFFFFFFFF) {
-			printf("%u != 0xFFFFFFFF\n", v2);
-			return 1;
-		}
-
-		return 0;
-	}
-],
-	samba_cv_CC_NEGATIVE_ENUM_VALUES=yes,samba_cv__CC_NEGATIVE_ENUM_VALUES=no)])
-if test x"$samba_cv_CC_NEGATIVE_ENUM_VALUES" != x"yes"; then
-	AC_MSG_WARN([using --uint-enums for pidl])
-	PIDL_ARGS="$PIDL_ARGS --uint-enums"
-fi
-
 dnl Figure out the flags to support named structure initializers
 
 LIBREPLACE_C99_STRUCT_INIT([],[AC_MSG_ERROR([c99 structure initializer are not supported])])
 
 UNAME_S=`(uname -s) 2>/dev/null` || UNAME_S="unknown"
 AC_MSG_CHECKING(uname -s)
@@ -551,13 +519,13 @@
 	AC_DEFINE(_GNU_SOURCE, 1, [Whether to use GNU libc extensions])
 	;;
 
 # Tests for linux LFS support. Need kernel 2.4 and glibc2.2 or greater support.
 #
     *linux*)
-        AC_MSG_CHECKING([for LFS support])
+        AC_CACHE_CHECK([for LFS support], samba_cv_LINUX_LFS_SUPPORT,[
         old_CPPFLAGS="$CPPFLAGS"
         CPPFLAGS="-D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE $CPPFLAGS"
        AC_TRY_RUN([
 #include <unistd.h>
 #include <sys/utsname.h>
 #include <string.h>
@@ -590,19 +558,20 @@
                exit(0);
        exit(1);
 #else
        exit(1);
 #endif
 }
-], [LINUX_LFS_SUPPORT=yes], [LINUX_LFS_SUPPORT=no], [LINUX_LFS_SUPPORT=cross])
-	CPPFLAGS="$old_CPPFLAGS"
-	if test x$LINUX_LFS_SUPPORT = xyes ; then
-		CPPFLAGS="-D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE $CPPFLAGS"
-		AC_DEFINE(_LARGEFILE64_SOURCE, 1, [Whether to enable large file support])
-		AC_DEFINE(_FILE_OFFSET_BITS, 64, [File offset bits])
-		AC_DEFINE(_GNU_SOURCE, 1, [Whether to use GNU libc extensions])
+ ], [samba_cv_LINUX_LFS_SUPPORT=yes], [samba_cv_LINUX_LFS_SUPPORT=no], [samba_cv_LINUX_LFS_SUPPORT=cross])
+ 	CPPFLAGS="$old_CPPFLAGS"])
+ 	if test x"$samba_cv_LINUX_LFS_SUPPORT" = x"yes" -o x"$samba_cv_LINUX_LFS_SUPPORT" = x"cross"; then
+ 		CPPFLAGS="-D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE $CPPFLAGS"
+ 		AC_DEFINE(_LARGEFILE_SOURCE, 1, [Whether to enable large file support 32])
+  		AC_DEFINE(_LARGEFILE64_SOURCE, 1, [Whether to enable large file support])
+  		AC_DEFINE(_FILE_OFFSET_BITS, 64, [File offset bits])
+  		AC_DEFINE(_GNU_SOURCE, 1, [Whether to use GNU libc extensions])
 	fi
 	AC_MSG_RESULT([$LINUX_LFS_SUPPORT])
 	;;
 
 #
 # MacOS X is the *only* system that uses compose character in utf8. This
@@ -2578,12 +2547,16 @@
 ],
 samba_cv_HAVE_KERNEL_OPLOCKS_LINUX=yes,samba_cv_HAVE_KERNEL_OPLOCKS_LINUX=no,samba_cv_HAVE_KERNEL_OPLOCKS_LINUX=cross)])
 if test x"$samba_cv_HAVE_KERNEL_OPLOCKS_LINUX" = x"yes"; then
     AC_DEFINE(HAVE_KERNEL_OPLOCKS_LINUX,1,[Whether to use linux kernel oplocks])
 fi
 
+if test x"$samba_cv_HAVE_KERNEL_OPLOCKS_LINUX" = x"cross"; then
+    AC_DEFINE(HAVE_KERNEL_OPLOCKS_LINUX,1,[Whether to use linux kernel oplocks])
+fi
+ 
 AC_CACHE_CHECK([for kernel change notify support],samba_cv_HAVE_KERNEL_CHANGE_NOTIFY,[
 AC_TRY_RUN([
 #include <sys/types.h>
 #include <fcntl.h>
 #include <signal.h>
 #ifndef F_NOTIFY
--- samba-3.5.5/source3/lib/readline.c	2010-06-18 16:01:04.000000000 +-0400
+++ samba-3.5.5/source3/lib/readline.c-new	2010-08-30 22:42:58.000000000 +-0400
@@ -49,20 +49,23 @@
 
 #if HAVE_LIBREADLINE
 /*
  * MacOS/X does not have rl_done in readline.h, but
  * readline.so has it
  */
+extern int tgetent();
+static int (*dummyptr)();
 extern int rl_done;
 #endif
 
 void smb_readline_done(void)
 {
 	smb_rl_done = true;
 #if HAVE_LIBREADLINE
 	rl_done = 1;
+	dummyptr=tgetent;
 #endif
 }
 
 /****************************************************************************
  Display the prompt and wait for input. Call callback() regularly
 ****************************************************************************/
