*** a/arch/sh/kernel/setup.c	2011-01-05 10:45:31.000000000 +0100
--- b/setup.c	2011-01-22 12:22:31.340928000 +0100
***************
*** 389,394 ****
--- 389,422 ----
  #endif
  #endif
  
+ 	{
+ 	char org_command_line[] = "console=ttyAS1,115200 root=/dev/mtdblock6";
+ 	char tdt_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock6 rw rootfstype=jffs2 init=/bin/devinit coprocessor_mem=4m@0x40000000,4m@0x40400000 printk=1 stmmaceth=ethaddr:";
+ 	char mac[] = "00:00:00:00:00:00";
+ 	int command_line_len = strlen(command_line);
+ 	int org_command_line_len = strlen(org_command_line);
+ 
+ 	if(command_line_len >= org_command_line_len && !strncmp(command_line, org_command_line, org_command_line_len))
+ 	{                                                                                                 
+ 		int i;
+ 		for(i = 0; i < (command_line_len - 7); i++)
+ 		{
+ 			if(!strncmp(command_line + i, "ethaddr", 7))
+ 			{
+ 				strlcpy(mac, command_line + i + 8, sizeof(mac));
+ 				break;
+ 			}
+ 			if(!strncmp(command_line + i, "hwaddr", 6))
+ 			{
+ 				strlcpy(mac, command_line + i + 7, sizeof(mac));
+ 				break;
+ 			}
+ 		}
+ 		strlcpy(command_line, tdt_command_line, sizeof(command_line));
+ 		strlcat(command_line, mac, sizeof(command_line));
+ 	}
+ 	}
+ 
  	/* Save unparsed command line copy for /proc/cmdline */
  	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
  	*cmdline_p = command_line;

*** linux-sh4-2.6.32.28_stm24_0207_orig/drivers/stm/gpio.c	2011-08-06 17:16:42.676314198 +0300
--- linux-sh4/drivers/stm/gpio.c	2011-08-07 03:21:10.140239689 +0300
***************
*** 27,38 ****
  #include <linux/stm/platform.h>
  #include <linux/stm/pad.h>
  #include <linux/stm/pio.h>
  #include "reg_pio.h"
  
  
- 
  struct stpio_pin {
  #ifdef CONFIG_STPIO
  	void (*func)(struct stpio_pin *pin, void *dev);
  	void* dev;
  	unsigned short port_no, pin_no;
--- 27,42 ----
  #include <linux/stm/platform.h>
  #include <linux/stm/pad.h>
  #include <linux/stm/pio.h>
+ #ifdef CONFIG_PROC_FS
+ #include <linux/proc_fs.h>
+ #include <linux/kallsyms.h>
+ #endif
  #include "reg_pio.h"
  
  
  struct stpio_pin {
  #ifdef CONFIG_STPIO
+ 	const char *pin_name;
  	void (*func)(struct stpio_pin *pin, void *dev);
  	void* dev;
  	unsigned short port_no, pin_no;
***************
*** 41,47 ****
  
  struct stm_gpio_pin {
  	unsigned char flags;
! #define PIN_FAKE_EDGE		4
  #define PIN_IGNORE_EDGE_FLAG	2
  #define PIN_IGNORE_EDGE_VAL	1
  #define PIN_IGNORE_RISING_EDGE	(PIN_IGNORE_EDGE_FLAG | 0)
--- 45,51 ----
  
  struct stm_gpio_pin {
  	unsigned char flags;
! #define PIN_FAKE_EDGE			4
  #define PIN_IGNORE_EDGE_FLAG	2
  #define PIN_IGNORE_EDGE_VAL	1
  #define PIN_IGNORE_RISING_EDGE	(PIN_IGNORE_EDGE_FLAG | 0)
***************
*** 75,81 ****
  static struct sysdev_class stm_gpio_sysdev_class;
  
  
- 
  int stm_gpio_num; /* Number of available internal PIOs (pins) */
  EXPORT_SYMBOL(stm_gpio_num);
  
--- 79,84 ----
***************
*** 352,357 ****
--- 355,363 ----
  
  	port->pins[offset].direction = direction;
  	set__PIO_PCx(port->base, offset, direction);
+ 
+ 	if (!port->pins[offset].stpio.pin_name)
+ 		port->pins[offset].stpio.pin_name = "-----";
  }
  
  
***************
*** 387,392 ****
--- 393,400 ----
  	struct stm_gpio_port *port = to_stm_gpio_port(chip);
  
  	set__PIO_PCx__INPUT_HIGH_IMPEDANCE(port->base, offset);
+ 	if (!port->pins[offset].stpio.pin_name)
+ 		port->pins[offset].stpio.pin_name = "-----";
  
  	return 0;
  }
***************
*** 399,404 ****
--- 407,414 ----
  	__stm_gpio_set(port, offset, value);
  
  	set__PIO_PCx__OUTPUT_PUSH_PULL(port->base, offset);
+ 	if (!port->pins[offset].stpio.pin_name)
+ 		port->pins[offset].stpio.pin_name = "-----";
  
  	return 0;
  }
***************
*** 465,477 ****
  
  	gpio_pin->stpio.port_no = port_no;
  	gpio_pin->stpio.pin_no = pin_no;
! 
  	return &gpio_pin->stpio;
  }
  EXPORT_SYMBOL(__stpio_request_pin);
  
  void stpio_free_pin(struct stpio_pin *pin)
  {
  	stm_pad_release_gpio(stm_gpio(pin->port_no, pin->pin_no));
  }
  EXPORT_SYMBOL(stpio_free_pin);
--- 475,491 ----
  
  	gpio_pin->stpio.port_no = port_no;
  	gpio_pin->stpio.pin_no = pin_no;
! 	gpio_pin->stpio.pin_name = (name==NULL)?"-----":name;
  	return &gpio_pin->stpio;
  }
  EXPORT_SYMBOL(__stpio_request_pin);
  
  void stpio_free_pin(struct stpio_pin *pin)
  {
+ 	stpio_configure_pin(pin, STPIO_IN);
+ 	pin->pin_name = NULL;
+ 	pin->func = 0;
+ 	pin->dev = 0;
  	stm_pad_release_gpio(stm_gpio(pin->port_no, pin->pin_no));
  }
  EXPORT_SYMBOL(stpio_free_pin);
***************
*** 587,592 ****
--- 601,687 ----
  }
  EXPORT_SYMBOL(stpio_set_irq_type);
  
+ #ifdef CONFIG_PROC_FS
+ 
+ static struct proc_dir_entry *proc_stpio;
+ 
+ static inline const char *stpio_get_direction_name(unsigned int direction)
+ {
+ 	switch (direction) {
+ 	case STPIO_NONPIO:		return "IN  (pull-up)      ";
+ 	case STPIO_BIDIR:		return "BI  (open-drain)   ";
+ 	case STPIO_OUT:			return "OUT (push-pull)    ";
+ 	case STPIO_IN:			return "IN  (Hi-Z)         ";
+ 	case STPIO_ALT_OUT:		return "Alt-OUT (push-pull)";
+ 	case STPIO_ALT_BIDIR:	return "Alt-BI (open-drain)";
+ 	default:				return "forbidden          ";
+ 	}
+ };
+ 
+ static inline const char *stpio_get_handler_name(void *func)
+ {
+ 	static char sym_name[KSYM_NAME_LEN];
+ 	char *modname;
+ 	unsigned long symbolsize, offset;
+ 	const char *symb;
+ 
+ 	if (func == NULL)
+ 		return "";
+ 
+ 	symb = kallsyms_lookup((unsigned long)func, &symbolsize, &offset,
+ 			&modname, sym_name);
+ 
+ 	return symb ? symb : "???";
+ }
+ 
+ static int stpio_read_proc(char *page, char **start, off_t off, int count,
+ 		int *eof, void *data_unused)
+ {
+ 	int len;
+ 	int port_no, pin_no;
+ 	off_t begin = 0;
+ 	int num_ports = stm_gpio_num / STM_GPIO_PINS_PER_PORT;
+ 	struct stm_gpio_port *port;
+ 	struct stm_gpio_pin *pin;
+ 
+ 	len = sprintf(page, "  port      name          direction\n");
+ 	for (port_no = 0; port_no < num_ports; port_no++)
+ 	{
+ 		for (pin_no = 0; pin_no < STM_GPIO_PINS_PER_PORT; pin_no++) {
+ 
+ 			port = &stm_gpio_ports[port_no];
+ 			if(!port) continue;
+ 
+ 			pin = &port->pins[pin_no];
+ 			if(!pin) continue;
+ 
+ 			char *name = pin->stpio.pin_name ? pin->stpio.pin_name : "";
+ 			len += sprintf(page + len,
+ 					"PIO %d.%d [%-10s] [%s] [%s]\n",
+ 					port_no, pin_no, name,
+ 					stpio_get_direction_name(pin->direction),
+ 					stpio_get_handler_name(pin->stpio.func));
+ 
+ 			if (len + begin > off + count)
+ 				goto done;
+ 			if (len + begin < off) {
+ 				begin += len;
+ 				len = 0;
+ 			}
+ 		}
+ 	}
+ 
+ 	*eof = 1;
+ 
+ done:
+ 	if (off >= len + begin)
+ 		return 0;
+ 	*start = page + (off - begin);
+ 	return ((count < begin + len - off) ? count : begin + len - off);
+ }
+ 
+ #endif /* CONFIG_PROC_FS */
+ 
  #endif /* CONFIG_STPIO */
  
  
***************
*** 967,972 ****
--- 1062,1073 ----
  {
  	int ret;
  
+ #ifdef CONFIG_PROC_FS
+ 	proc_stpio = create_proc_entry("stpio", 0, NULL);
+ 	if (proc_stpio)
+ 		proc_stpio->read_proc = stpio_read_proc;
+ #endif
+ 
  	ret = sysdev_class_register(&stm_gpio_sysdev_class);
  	if (ret)
  		return ret;

*** linux-sh4-2.6.32.28_stm24_0207_orig/drivers/net/phy/phy_device.c	2011-08-04 16:27:16.440157990 +0300
--- linux-sh4/drivers/net/phy/phy_device.c	2011-08-05 17:35:37.308158605 +0300
***************
*** 962,968 ****
  		return retval;
  	}
  
! 	pr_debug("%s: Registered new driver\n", new_driver->name);
  
  	return 0;
  }
--- 962,968 ----
  		return retval;
  	}
  
! 	pr_info("%s: Registered new driver (0x%08x)\n", new_driver->name, new_driver->phy_id);
  
  	return 0;
  }

*** linux-sh4-2.6.32.28_stm24_0207_orig/drivers/net/stmmac/stmmac_mdio.c	2011-08-06 17:16:40.233314199 +0300
--- linux-sh4/drivers/net/stmmac/stmmac_mdio.c	2011-08-07 00:24:49.531239690 +0300
***************
*** 169,174 ****
--- 169,175 ----
  	priv->mii = new_bus;
  
  	found = 0;
+ 
  	for (addr = 0; addr < PHY_MAX_ADDR; addr++) {
  		struct phy_device *phydev = new_bus->phy_map[addr];
  		if (phydev) {
***************
*** 191,202 ****
  			 * and no PHY number was provided to the MAC,
  			 * use the one probed here.
  			 */
! 			if ((priv->plat->bus_id == mdio_bus_data->bus_id) &&
! 			    (priv->plat->phy_addr == -1))
  				priv->plat->phy_addr = addr;
  
- 			act = (priv->plat->bus_id == mdio_bus_data->bus_id) &&
- 				(priv->plat->phy_addr == addr);
  			switch (phydev->irq) {
  			case PHY_POLL:
  				irq_str = "POLL";
--- 192,214 ----
  			 * and no PHY number was provided to the MAC,
  			 * use the one probed here.
  			 */
! 
! 			act = 0;
! 
! 			if ((priv->plat->bus_id == mdio_bus_data->bus_id) && (/*(priv->plat->phy_addr == -1) ||*/
! 					(phydev->phy_id == 0x0181b880) || // Davicom DM9161E
! 					(phydev->phy_id == 0x0181b8a0) || // Davicom DM9161A
! 					(phydev->phy_id == 0x00181b80) || // Davicom DM9131
! 					(phydev->phy_id == 0x1c040011) || // STe100p
! 					(phydev->phy_id == 0x00061c50) || // STe101p
! 					(phydev->phy_id == 0x00008201) || //
! 					(phydev->phy_id == 0x0007c0f1) || // Pingulux
! 					(phydev->phy_id == 0x001cc912)))  // RTL821x
! 			{
  				priv->plat->phy_addr = addr;
+ 				act=1;
+ 			}
  
  			switch (phydev->irq) {
  			case PHY_POLL:
  				irq_str = "POLL";

*** linux-sh4-2.6.32.28_stm24_0207_orig/arch/sh/boards/mach-mb618/setup.c	2011-08-06 17:16:45.143314199 +0300
--- linux-sh4/arch/sh/boards/mach-mb618/setup.c	2011-08-08 04:57:30.889095622 +0300
***************
*** 12,22 ****
--- 12,24 ----
  
  #include <linux/init.h>
  #include <linux/platform_device.h>
+ #include <linux/delay.h>
  #include <linux/io.h>
  #include <linux/leds.h>
  #include <linux/phy.h>
  #include <linux/i2c.h>
  #include <linux/gpio.h>
+ #include <linux/stm/gpio.h>
  #include <linux/gpio_keys.h>
  #include <linux/input.h>
  #include <linux/irq.h>
***************
*** 26,49 ****
  #include <linux/stm/pci-synopsys.h>
  #include <linux/mtd/mtd.h>
  #include <linux/mtd/nand.h>
  #include <linux/mtd/physmap.h>
  #include <linux/mtd/partitions.h>
  #include <asm/irq-ilc.h>
  #include <asm/irl.h>
  #include <sound/stm.h>
  #include <mach/common.h>
  
  
! 
! /* Whether the hardware supports NOR or NAND Flash depends on J34.
!  * In position 1-2 CSA selects NAND, in position 2-3 is selects NOR.
!  * Note that J30A must be in position 2-3 to select the on board Flash
!  * (both NOR and NAND).
!  */
! #define FLASH_NOR
! #define MB618_PIO_FLASH_VPP stm_gpio(3, 4)
! 
! 
  
  static void __init mb618_setup(char** cmdline_p)
  {
--- 28,70 ----
  #include <linux/stm/pci-synopsys.h>
  #include <linux/mtd/mtd.h>
  #include <linux/mtd/nand.h>
+ #include <linux/stm/nand.h>
  #include <linux/mtd/physmap.h>
  #include <linux/mtd/partitions.h>
  #include <asm/irq-ilc.h>
  #include <asm/irl.h>
  #include <sound/stm.h>
  #include <mach/common.h>
+ #include <linux/bpa2.h>
  
+ #define MB618_PIO_PHY_RESET stm_gpio(5, 3)
  
! const char *LMI_IO_partalias[] = { "v4l2-coded-video-buffers", "BPA2_Region1", "v4l2-video-buffers" ,
!                                     "coredisplay-video", "gfx-memory", "BPA2_Region0", "LMI_VID", NULL };
!  
! /*
! 0x40000000 - 0x403FFFFF - cocpu 1 ram (4mb)
! 0x40400000 - 0x407FFFFF - cocpu 2 ram (4mb)
! 0x40800000 - 0x47FFFFFF - linux   (120mb) 
! 0x48000000 - 0x49FFFFFF - bigphys ( 32mb)
! 0x4A000000 - 0x4FFFFFFF - lmi_io  ( 96mb)
! */
! static struct bpa2_partition_desc bpa2_parts_table[] = {
!     {
!  	    .name  = "bigphysarea",
!  	    .start = 0x48000000,
!  	    .size  = 0x02000000, /* 32 Mb */
!  	    .flags = 0,
!  	    .aka   = NULL
!     }, 
!     {
!  	    .name  = "LMI_IO",
!  	    .start = 0x4A000000,
!  	    .size  = 0x06000000, /* 96 Mb */
!  	    .flags = 0,
!  	    .aka   = LMI_IO_partalias
!     }, 
!  };
  
  static void __init mb618_setup(char** cmdline_p)
  {
***************
*** 51,169 ****
  
  	stx7111_early_device_init();
  
! 	stx7111_configure_asc(2, &(struct stx7111_asc_config) {
! 			.hw_flow_control = 1,
! 			.is_console = 1, });
! 	stx7111_configure_asc(3, &(struct stx7111_asc_config) {
! 			.hw_flow_control = 1,
! 			.is_console = 0, });
! }
! 
  
  
! static struct platform_device mb618_leds = {
! 	.name = "leds-gpio",
! 	.id = -1,
! 	.dev.platform_data = &(struct gpio_led_platform_data) {
! 		.num_leds = 2,
! 		.leds = (struct gpio_led[]) {
! 			{
! 				.name = "HB green",
! 				.default_trigger = "heartbeat",
! 				.gpio = stm_gpio(6, 0),
! 			}, {
! 				.name = "HB red",
! 				.gpio = stm_gpio(6, 1),
! 			},
! 		},
  	},
- };
- 
- 
- 
- static struct gpio_keys_button mb618_buttons[] = {
  	{
! 		.code = BTN_0,
! 		.gpio = stm_gpio(6, 2),
! 		.desc = "SW2",
! 	}, {
! 		.code = BTN_1,
! 		.gpio = stm_gpio(6, 3),
! 		.desc = "SW3",
! 	}, {
! 		.code = BTN_2,
! 		.gpio = stm_gpio(6, 4),
! 		.desc = "SW4",
! 	}, {
! 		.code = BTN_3,
! 		.gpio = stm_gpio(6, 5),
! 		.desc = "SW5",
  	},
! };
! 
! static struct platform_device mb618_button_device = {
! 	.name = "gpio-keys",
! 	.id = -1,
! 	.num_resources = 0,
! 	.dev.platform_data = &(struct gpio_keys_platform_data) {
! 		.buttons = mb618_buttons,
! 		.nbuttons = ARRAY_SIZE(mb618_buttons),
  	},
  };
  
! 
! 
! static void mb618_nor_set_vpp(struct map_info *info, int enable)
! {
! 	gpio_set_value(MB618_PIO_FLASH_VPP, enable);
! }
! 
! static struct platform_device mb618_nor_flash = {
  	.name		= "physmap-flash",
  	.id		= -1,
  	.num_resources	= 1,
  	.resource	= (struct resource[]) {
! 		STM_PLAT_RESOURCE_MEM(0, 32*1024*1024),
  	},
  	.dev.platform_data = &(struct physmap_flash_data) {
  		.width		= 2,
! 		.set_vpp	= mb618_nor_set_vpp,
! 	},
! };
! 
! /* J34 must be in the 1-2 position to enable NOR Flash */
! static struct mtd_partition mb618_nand_flash_partitions[] = {
! 	{
! 		.name	= "NAND root",
! 		.offset	= 0,
! 		.size 	= 0x00800000
! 	}, {
! 		.name	= "NAND home",
! 		.offset	= MTDPART_OFS_APPEND,
! 		.size	= MTDPART_SIZ_FULL
  	},
  };
  
! struct stm_nand_bank_data nand_bank_data = {
! 	.csn		= 0,
! 	.nr_partitions	= ARRAY_SIZE(mb618_nand_flash_partitions),
! 	.partitions	= mb618_nand_flash_partitions,
  	.options	= NAND_NO_AUTOINCR | NAND_USE_FLASH_BBT,
! 	.timing_data	= &(struct stm_nand_timing_data) {
  		.sig_setup	= 50,		/* times in ns */
  		.sig_hold	= 50,
  		.CE_deassert	= 0,
  		.WE_to_RBn	= 100,
! 		.wr_on		= 10,
! 		.wr_off		= 40,
! 		.rd_on		= 10,
! 		.rd_off		= 40,
! 		.chip_delay	= 30,		/* in us */
  	},
  
  	.emi_withinbankoffset	= 0,
  };
  
  static int mb618_phy_reset(void *bus)
  {
  	epld_write(1, 0);	/* bank = Ctrl */
--- 72,167 ----
  
  	stx7111_early_device_init();
  
!   	stx7111_configure_asc(2, &(struct stx7111_asc_config) {
!   			.hw_flow_control = 1,
!   			.is_console = 1, });
  
+   	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
+ }
  
! // Nor Flash Configuration
! static struct mtd_partition nor_parts[] = {
! 	{
! 		.name   = "Boot firmware", 		//  (512K)
! 		.size   = 0x00080000,
! 		.offset = 0x00000000,
  	},
  	{
! 		.name   = "Kernel",			//  (7MB)
! 		.size   = 0x00700000,
! 		.offset = 0x00080000,
  	},
! 	{
! 		.name   = "Reserve",		//  (512K)
! 		.size   = MTDPART_SIZ_FULL,
! 		.offset = 0x00780000,
  	},
  };
  
! static struct platform_device mb618_nor_device = {
  	.name		= "physmap-flash",
  	.id		= -1,
  	.num_resources	= 1,
  	.resource	= (struct resource[]) {
! 		STM_PLAT_RESOURCE_MEM(0, 8*1024*1024),
  	},
  	.dev.platform_data = &(struct physmap_flash_data) {
  		.width		= 2,
! 		.nr_parts	= ARRAY_SIZE(nor_parts),
! 		.parts		= nor_parts
  	},
  };
  
! // Nand Flash Configuration
! static struct mtd_partition nand_parts[] = {
! 	 {
! 	 .name = "Spark Kernel",
! 	 .size = 0x0800000,
! 	 .offset = 0,
! 	 }, {
!      .name = "Spark Rootfs",
!      .size = 0x17800000,
!      .offset = 0x800000,
!      }, {
!      .name = "E2 Kernel",
!      .size = 0x800000,
!      .offset = 0x18000000,
!      }, {
! 	 .name = "E2 RootFs",
! 	 .size = 0x4000000,
! 	 .offset = 0x18800000,
! 	 },
! };
! 
! static struct stm_nand_bank_data nand_bank_data = {
! 	.csn		= 1,
! 	.nr_partitions	= ARRAY_SIZE(nand_parts),
! 	.partitions	= nand_parts,
  	.options	= NAND_NO_AUTOINCR | NAND_USE_FLASH_BBT,
! 	.timing_data = &(struct stm_nand_timing_data) {
  		.sig_setup	= 50,		/* times in ns */
  		.sig_hold	= 50,
  		.CE_deassert	= 0,
  		.WE_to_RBn	= 100,
! 		.wr_on		= 20,
! 		.wr_off		= 50,
! 		.rd_on		= 20,
! 		.rd_off		= 50,
! 		.chip_delay	= 50,		/* in us */
  	},
  
  	.emi_withinbankoffset	= 0,
  };
  
+ static struct platform_device mb618_nand_device = {
+ 	.name		= "stm-nand-emi",
+ 	.dev.platform_data = &(struct stm_plat_nand_emi_data){
+ 		.nr_banks	= 1,
+ 		.banks		= &nand_bank_data,
+ 		.emi_rbn_gpio	= -1,
+ 	},
+ };
+ 
  static int mb618_phy_reset(void *bus)
  {
  	epld_write(1, 0);	/* bank = Ctrl */
***************
*** 175,187 ****
  	return 1;
  }
  
! static struct stmmac_mdio_bus_data stmmac_mdio_bus = {
  	.bus_id = 0,
  	.phy_reset = mb618_phy_reset,
  	.phy_mask = 0,
  };
  
! static struct platform_device epld_device = {
  	.name		= "epld",
  	.id		= -1,
  	.num_resources	= 1,
--- 173,185 ----
  	return 1;
  }
  
! static struct stmmac_mdio_bus_data mb618_phy_private_data = {
  	.bus_id = 0,
  	.phy_reset = mb618_phy_reset,
  	.phy_mask = 0,
  };
  
! static struct platform_device mb618_epld_device = {
  	.name		= "epld",
  	.id		= -1,
  	.num_resources	= 1,
***************
*** 198,320 ****
  	},
  };
  
- 
- 
- static struct stm_plat_pci_config mb618_pci_config = {
- 	/* We don't bother with INT[BCD] as they are shared with the ssc
- 	 * J20-A must be removed, J20-B must be 5-6 */
- 	.pci_irq = {
- 		[0] = PCI_PIN_DEFAULT,
- 		[1] = PCI_PIN_UNUSED,
- 		[2] = PCI_PIN_UNUSED,
- 		[3] = PCI_PIN_UNUSED
- 	},
- 	.serr_irq = PCI_PIN_DEFAULT, /* J32-F fitted */
- 	.idsel_lo = 30,
- 	.idsel_hi = 30,
- 	.req_gnt = {
- 		[0] = PCI_PIN_DEFAULT,
- 		[1] = PCI_PIN_UNUSED,
- 		[2] = PCI_PIN_UNUSED,
- 		[3] = PCI_PIN_UNUSED
- 	},
- 	.pci_clk = 33333333,
- 	.pci_reset_gpio = -EINVAL,	/* Reset done by EPLD on power on */
- };
- 
- int pcibios_map_platform_irq(struct pci_dev *dev, u8 slot, u8 pin)
- {
-        /* We can use the standard function on this board */
-        return stx7111_pcibios_map_platform_irq(&mb618_pci_config, pin);
- }
- 
  static struct platform_device *mb618_devices[] __initdata = {
! 	&mb618_leds,
! 	&epld_device,
! #ifdef FLASH_NOR
! 	&mb618_nor_flash,
! #endif
! 	&mb618_button_device,
! };
! 
! /* SCART switch simple control */
! 
! /* Enable CVBS output to both (TV & VCR) SCART outputs */
! static int mb618_scart_audio_init(struct i2c_client *client, void *priv)
! {
! 	const char cmd[] = { 0x2, 0x11 };
! 	int cmd_len = sizeof(cmd);
! 
! 	return i2c_master_send(client, cmd, cmd_len) != cmd_len;
! }
! 
! /* Audio on SCART outputs control */
! static struct i2c_board_info mb618_scart_audio __initdata = {
! 	I2C_BOARD_INFO("snd_conv_i2c", 0x4b),
! 	.type = "STV6417",
! 	.platform_data = &(struct snd_stm_conv_i2c_info) {
! 		.group = "Analog Output",
! 		.source_bus_id = "snd_pcm_player.1",
! 		.channel_from = 0,
! 		.channel_to = 1,
! 		.format = SND_STM_FORMAT__I2S |
! 				SND_STM_FORMAT__SUBFRAME_32_BITS,
! 		.oversampling = 256,
! 		.init = mb618_scart_audio_init,
! 		.enable_supported = 1,
! 		.enable_cmd = (char []){ 0x01, 0x09 },
! 		.enable_cmd_len = 2,
! 		.disable_cmd = (char []){ 0x01, 0x00 },
! 		.disable_cmd_len = 2,
! 	},
  };
  
  static int __init mb618_devices_init(void)
  {
! 	int peripherals_i2c_bus;
! 
! 	stx7111_configure_pci(&mb618_pci_config);
! 
! 	stx7111_configure_pwm(&(struct stx7111_pwm_config) {
! 			.out0_enabled = 1,
! 			.out1_enabled = 0, });
! 
! 	stx7111_configure_ssc_spi(0, NULL);
! 	stx7111_configure_ssc_i2c(1); /* J12=1-2, J16=1-2 */
! 	peripherals_i2c_bus = stx7111_configure_ssc_i2c(2);
  	stx7111_configure_ssc_i2c(3);
  
  	stx7111_configure_usb(&(struct stx7111_usb_config) {
  			.invert_ovrcur = 1, });
  
  	stx7111_configure_ethernet(&(struct stx7111_ethernet_config) {
  			.mode = stx7111_ethernet_mode_mii,
  			.ext_clk = 0,
  			.phy_bus = 0,
  			.phy_addr = -1,
! 			.mdio_bus_data = &stmmac_mdio_bus,
  		});
  
! 	stx7111_configure_lirc(&(struct stx7111_lirc_config) {
! #ifdef CONFIG_LIRC_STM_UHF
! 			.rx_mode = stx7111_lirc_rx_mode_uhf,
! #else
! 			.rx_mode = stx7111_lirc_rx_mode_ir,
! #endif
! 			.tx_enabled = 1,
! 			.tx_od_enabled = 0, });
! 
! 	gpio_request(MB618_PIO_FLASH_VPP, "Flash VPP");
! 	gpio_direction_output(MB618_PIO_FLASH_VPP, 0);
! 
! 	i2c_register_board_info(peripherals_i2c_bus, &mb618_scart_audio, 1);
  
- #ifndef FLASH_NOR
  	stx7111_configure_nand_flex(1, &nand_bank_data, 0);
- 	/* The MTD NAND code doesn't understand the concept of VPP,
- 	 * (or hardware write protect) so permanently enable it. */
- 	gpio_direction_output(MB618_PIO_FLASH_VPP, 1);
- #endif
  
  	return platform_add_devices(mb618_devices, ARRAY_SIZE(mb618_devices));
  }
--- 196,235 ----
  	},
  };
  
  static struct platform_device *mb618_devices[] __initdata = {
! 	&mb618_epld_device,
! 	&mb618_nor_device,
! 	&mb618_nand_device,
  };
  
  static int __init mb618_devices_init(void)
  {
! 	stx7111_configure_ssc_i2c(0);
! 	stx7111_configure_ssc_i2c(1);
! 	stx7111_configure_ssc_i2c(2);
  	stx7111_configure_ssc_i2c(3);
  
  	stx7111_configure_usb(&(struct stx7111_usb_config) {
  			.invert_ovrcur = 1, });
  
+ 	gpio_request(MB618_PIO_PHY_RESET, "PHY");
+ 	gpio_direction_output(MB618_PIO_PHY_RESET, STM_GPIO_DIRECTION_OUT);
+ 	gpio_set_value(MB618_PIO_PHY_RESET, 1);
+ 
  	stx7111_configure_ethernet(&(struct stx7111_ethernet_config) {
  			.mode = stx7111_ethernet_mode_mii,
  			.ext_clk = 0,
  			.phy_bus = 0,
  			.phy_addr = -1,
! 			.mdio_bus_data = &mb618_phy_private_data,
  		});
  
!   	stx7111_configure_lirc(&(struct stx7111_lirc_config) {
!   			.rx_mode = stx7111_lirc_rx_mode_ir,
!   			.tx_enabled = 1,
!   			.tx_od_enabled = 0, });
  
  	stx7111_configure_nand_flex(1, &nand_bank_data, 0);
  
  	return platform_add_devices(mb618_devices, ARRAY_SIZE(mb618_devices));
  }
***************
*** 358,364 ****
  	const int version_offset = 0;
  	int version;
  
! 	epld_early_init(&epld_device);
  
  	epld_write(0, 0);	/* bank = Test */
  	epld_write(0x63, test_offset);
--- 273,279 ----
  	const int version_offset = 0;
  	int version;
  
! 	epld_early_init(&mb618_epld_device);
  
  	epld_write(0, 0);	/* bank = Test */
  	epld_write(0x63, test_offset);
***************
*** 391,400 ****
  }
  
  struct sh_machine_vector mv_mb618 __initmv = {
! 	.mv_name		= "STx7111 Mboard",
  	.mv_setup		= mb618_setup,
  	.mv_nr_irqs		= NR_IRQS,
  	.mv_init_irq		= mb618_init_irq,
  	.mv_ioport_map		= mb618_ioport_map,
- 	STM_PCI_IO_MACHINE_VEC
  };
--- 306,314 ----
  }
  
  struct sh_machine_vector mv_mb618 __initmv = {
! 	.mv_name		= "STx7111 Mboard (SPARK)",
  	.mv_setup		= mb618_setup,
  	.mv_nr_irqs		= NR_IRQS,
  	.mv_init_irq		= mb618_init_irq,
  	.mv_ioport_map		= mb618_ioport_map,
  };
*** linux-sh4-2.6.32.28_stm24_0207.orig/drivers/mtd/nand/nand_ecc.c	2011-11-16 23:19:57.000000000 +0200
--- linux-sh4/drivers/mtd/nand/nand_ecc.c	2011-11-17 21:10:15.882600432 +0200
***************
*** 492,503 ****
  	}
  	/* count nr of bits; use table lookup, faster than calculating it */
  	if ((bitsperbyte[b0] + bitsperbyte[b1] + bitsperbyte[b2]) == 1) {
! 		printk(KERN_DEBUG "%s: ignoring error in ECC, data ok: [",
! 		       __func__);
  		return 1;	/* error in ecc data; no action needed */
  	}
  
! 	printk(KERN_ERR "%s: uncorrectable error: [", __func__);
  	return -1;
  }
  EXPORT_SYMBOL(__nand_correct_data);
--- 492,503 ----
  	}
  	/* count nr of bits; use table lookup, faster than calculating it */
  	if ((bitsperbyte[b0] + bitsperbyte[b1] + bitsperbyte[b2]) == 1) {
! 		/*printk(KERN_DEBUG "%s: ignoring error in ECC, data ok: [",
! 		       __func__);*/
  		return 1;	/* error in ecc data; no action needed */
  	}
  
! 	//printk(KERN_ERR "%s: uncorrectable error: [", __func__);
  	return -1;
  }
  EXPORT_SYMBOL(__nand_correct_data);
*** linux-sh4-2.6.32.28_stm24_0207.orig/drivers/mtd/nand/nand_base.c	2011-11-16 23:19:57.000000000 +0200
--- linux-sh4/drivers/mtd/nand/nand_base.c	2011-11-17 21:15:21.970973574 +0200
***************
*** 1201,1220 ****
  
  			/* Now read the page into the buffer */
  			if (unlikely(ops->mode == MTD_OOB_RAW))
! 				ret = chip->ecc.read_page_raw(mtd, chip,
! 							      bufpoi, page);
! 			else if (!aligned && NAND_SUBPAGE_READ(chip) && !oob)
! 				ret = chip->ecc.read_subpage(mtd, chip, col, bytes, bufpoi);
  			else
! 				ret = chip->ecc.read_page(mtd, chip, bufpoi,
! 							  page);
  			if (ret < 0)
  				break;
  
  			/* Transfer not aligned data */
  			if (!aligned) {
! 				if (!NAND_SUBPAGE_READ(chip) && !oob)
! 					chip->pagebuf = realpage;
  				memcpy(buf, chip->buffers->databuf + col, bytes);
  			}
  
--- 1201,1215 ----
  
  			/* Now read the page into the buffer */
  			if (unlikely(ops->mode == MTD_OOB_RAW))
! 				ret = chip->ecc.read_page_raw(mtd, chip,bufpoi, page);
  			else
! 				ret = chip->ecc.read_page(mtd, chip, bufpoi, page);
  			if (ret < 0)
  				break;
  
  			/* Transfer not aligned data */
  			if (!aligned) {
! 				chip->pagebuf = realpage;
  				memcpy(buf, chip->buffers->databuf + col, bytes);
  			}
  
*** linux-sh4-2.6.32.28_stm24_0207.orig/arch/sh/kernel/setup.c	2011-11-17 21:34:14.782844589 +0200
--- linux-sh4/arch/sh/kernel/setup.c	2011-11-23 21:32:15.299229956 +0200
***************
*** 388,393 ****
--- 388,417 ----
  #endif
  #endif
  
+ 	{
+ 		/* spider: remove bigphysarea allocation from command line */
+ 		int i;
+ 		int command_line_len = strlen(command_line);
+ 
+ 		for(i = 0; i < (command_line_len-11); i++)
+ 		{
+ 			if(!strncmp(command_line + i + 1, "bigphysarea", 11))
+ 			{
+ 				// search for next pos
+ 				int k;
+ 				int pos=command_line_len;
+ 				for(k=i+1; k<command_line_len; k++)
+ 					if(command_line[k]==' ') {
+ 						pos=k;
+ 						break;
+ 					}
+ 				memmove(command_line+i, command_line+pos, command_line_len-pos);
+ 				memset(&command_line[command_line_len-(pos-i)], '\0', pos-i);
+ 				break;
+ 			}
+ 		}
+ 	}
+ 
  	/* Save unparsed command line copy for /proc/cmdline */
  	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
  	*cmdline_p = command_line;
